@charset "UTF-8";
@import 'https://file.myfontastic.com/DNZuRqZzDWCAfLwPV36W5E/icons.css';
@import 'https://fonts.googleapis.com/css?family=Oswald:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Noto+Sans:400,700';
@import 'https://fonts.googleapis.com/css?family=Ubuntu+Condensed';
@import 'https://file.myfontastic.com/DNZuRqZzDWCAfLwPV36W5E/icons.css';
@import 'https://fonts.googleapis.com/css?family=Oswald:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,700';
@import 'https://fonts.googleapis.com/css?family=Noto+Sans:400,700';
@import 'https://fonts.googleapis.com/css?family=Ubuntu+Condensed';
.slidesjs-pagination, .main-menu {
  list-style: none;
  padding-left: 0;
  margin: 0; }

/**
  EDgrid es una librerÃ­a CSS para construir layouts con Responsive Web Design
  Importe este archivo en su proyecto para empezar a usarlo
**/
*,
*:before,
*:after {
  box-sizing: border-box; }

body {
  margin: 0;
  font-family: sans-serif; }

img {
  max-width: 100%;
  height: auto; }

a {
  text-decoration: none; }
  a:hover {
    text-decoration: none; }

.container {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  width: 100%; }

.item, .slides, .history, .skills {
  margin: 0;
  padding-left: 1em;
  padding-right: 1em; }

.item {
  width: 100%; }
  .item.container {
    padding-left: 0;
    padding-right: 0; }

.fancybox-wrap {
  position: absolute !important;
  z-index: 1100 !important; }

.fancybox-overlay {
  background: rgba(0, 0, 0, 0.75);
  z-index: 1000; }

.slides {
  width: 100%;
  display: none;
  position: relative;
  z-index: 1; }
  .slides a:hover {
    text-decoration: none; }
  .slides img {
    display: block;
    width: 100%;
    height: auto; }

.slidesjs-navigation {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  height: 50px;
  width: 50px;
  line-height: 50px;
  text-align: center;
  background: rgba(0, 0, 0, 0.5);
  color: #fff;
  font-size: 1.5em;
  border-radius: 50%;
  text-shadow: 2px 2px #070D12, 1px 1px #070D12, 2px 2px #070D12;
  opacity: .5;
  transition: all 0.3s;
  z-index: 2000; }
  .slidesjs-navigation:hover {
    opacity: 1; }
  .slidesjs-navigation::before {
    position: relative;
    top: 3px !important; }

.slidesjs-previous {
  left: 1em; }
  .slidesjs-previous::before {
    left: -3px; }

.slidesjs-next {
  right: 1em; }
  .slidesjs-next::before {
    left: 2px; }

.slidesjs-pagination {
  position: absolute;
  z-index: 1000;
  bottom: 1em;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  right: 2em; }
  .slidesjs-pagination a {
    margin: 0 .5em;
    color: #FFFFFF;
    text-shadow: 2px 2px rgba(0, 0, 0, 0.5), 1px 1px rgba(0, 0, 0, 0.5); }
    .slidesjs-pagination a::before {
      position: relative;
      top: 0 !important; }
  @media screen and (max-width: 639px) {
    .slidesjs-pagination {
      -webkit-transform: scale(0.8);
      -ms-transform: scale(0.8);
      transform: scale(0.8); } }

body {
  background: #FDFDFD;
  font-family: "Ubuntu Condensed", sans-serif;
  color: #444;
  height: 100vh;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }

a {
  color: inherit;
  text-decoration: none; }

p, blockquote, li {
  font-size: 1em;
  line-height: 1.5; }

p {
  margin: 0 0 1em 0; }
  p:last-child, p:only-child {
    margin: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Noto Sans", sans-serif;
  font-weight: 700;
  text-transform: normal;
  color: #2b2b2b;
  background: none;
  margin: 0;
  width: 100%;
  text-align: center;
  margin-bottom: 1em; }

h1 {
  font-size: 2em;
  line-height: 1.2; }

h2 {
  font-size: 1.6em; }

h3 {
  font-size: 1.3em; }

h4 {
  font-size: 1em; }

h5 {
  font-size: 0.9em; }

h6 {
  font-size: 0.8em; }

section {
  z-index: -1; }
  @media screen and (max-width: 1023px) {
    section {
      margin-left: 160px;
      padding-top: 4em;
      width: 100%; } }
  @media screen and (min-width: 1024px) {
    section {
      padding-left: 160px; } }

.main-header {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 160px;
  background: #1C262B;
  height: 100vh;
  overflow-y: auto;
  position: fixed;
  z-index: 200; }

.top {
  height: 160px;
  background: radial-gradient(#777 20%, #222); }
  .top__title {
    position: fixed;
    background: #2BA163;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    height: 2em;
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    color: rgba(253, 253, 253, 0.8);
    text-transform: uppercase; }
    @media screen and (max-width: 1023px) {
      .top__title {
        top: 0;
        left: 0;
        width: 100vw;
        height: 3em;
        background: #070D12;
        border-bottom: 1px solid rgba(253, 253, 253, 0.3);
        transition: all 0.3s; }
        .top__title.active {
          left: 160px; } }
    @media screen and (min-width: 1024px) {
      .top__title {
        top: calc(150px - 1em);
        left: 0;
        width: 160px;
        z-index: 250; } }
    .top__title h1 {
      font-size: .8em;
      margin: 0;
      background: none;
      text-align: left;
      color: inherit; }
      @media screen and (max-width: 1023px) {
        .top__title h1 {
          font-size: 1em;
          padding-left: 1em; } }
      @media screen and (min-width: 1024px) {
        .top__title h1 {
          text-align: center; } }
    .top__title a {
      color: inherit;
      border-right: 1px solid rgba(253, 253, 253, 0.3);
      height: 3rem;
      width: 3.5rem;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-justify-content: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-align-items: center;
      -ms-flex-align: center;
      align-items: center;
      font-size: 1.3em; }
      @media screen and (min-width: 1024px) {
        .top__title a {
          display: none; } }
      .top__title a::before {
        top: 1px; }

.main-nav {
  -webkit-flex: 2;
  -ms-flex: 2;
  flex: 2; }
  @media screen and (landscape) and (max-height: s) {
    .main-nav {
      -webkit-flex: 1;
      -ms-flex: 1;
      flex: 1; } }

.main-menu {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }
  .main-menu li {
    -webkit-flex: 2;
    -ms-flex: 2;
    flex: 2;
    height: 85px;
    border-bottom: 1px solid rgba(253, 253, 253, 0.1); }
    @media screen and (max-width: 1023px) {
      .main-menu li {
        height: 70px; } }
  .main-menu a {
    color: rgba(253, 253, 253, 0.4);
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    height: 100%;
    font-size: .7em;
    text-transform: uppercase;
    transition: all 0.3s; }
    .main-menu a:hover, .main-menu a.selected {
      color: rgba(253, 253, 253, 0.8); }
  .main-menu span {
    font-size: 2em; }

.bottom {
  margin-bottom: .5em; }
  .bottom p {
    color: rgba(253, 253, 253, 0.4);
    text-align: center;
    font-size: .7em; }
  .bottom span {
    margin-left: 3px; }

.home {
  height: 100vh;
  width: 100%;
  background: url(../img/bg.jpg) center/cover no-repeat;
  position: relative;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  color: #FDFDFD;
  padding-bottom: 3em; }
  .home::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(17, 17, 17, 0.75); }
  .home__message {
    position: relative;
    z-index: 500; }
    .home__message span {
      text-align: center;
      display: block; }
    .home__message p {
      text-align: center;
      font-size: 1.2em; }
  .home .home__name {
    margin: 0;
    font-size: 3em;
    text-transform: uppercase; }

.resume > .container {
  outline: 1px solid red;
  width: 90%; }

.resume {
  min-height: 100vh !important;
  overflow-y: auto; }

.history {
  width: 100%;
  overflow-y: scroll;
  background: lightcoral; }
  @media screen and (min-width: 640px) {
    .history {
      width: 50%; } }

.skills {
  width: 100%;
  background: lightgoldenrodyellow; }
  @media screen and (min-width: 640px) {
    .skills {
      width: 50%; } }

[class^="icon-"]::before {
  position: relative;
  top: 3px; }

body {
  position: relative;
  width: 100vw;
  height: 100vh; }
  @media screen and (max-width: 1023px) {
    body {
      left: -160px;
      transition: all 0.3s; } }
  body.active {
    left: 0; }

.title_page {
  margin-top: 1em; }
  .title_page span {
    display: block;
    font-size: 2em;
    line-height: 1;
    text-align: center; }
  .title_page h2 {
    line-height: 1;
    margin-bottom: 2em;
    font-size: 3em; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
